
1]Tree Proorder Traversal

#include<iostream>
using namespace std;

//node creation
struct Node {

        int data;
        struct Node *left,*right;
        Node(int data)
        {
                this->data=data;
                left=right=NULL;
        }

};

void printPreorder(struct Node* node)
{

        if(node==NULL)
                return;

        /* first print data of node */
        cout << node->data << " ";

        /*left subtree*/
        printPreorder(node->left);

        /*right subtree*/
        printPreorder(node->right);

}

int main()
{
        struct Node* root=new Node(1);
        root->left=new Node(2);
        root->right=new Node(3);
        root->left->left=new Node(4);
        root->left->right=new Node(5);

        cout << "\n Preorder traversal of binary tree is \n";
        printPreorder(root);
}


/* output 
aishwariya@linux:~/Hackerrank/Day2$ ./a.out

 Preorder traversal of binary tree is 
1 2 4 5 3 
*/                                      

========================================================================

2]Insert a Node at the Tail of a Linked List


#include<stdio.h>
#include<stdlib.h>

struct node
{
    int data;
    struct node *next;
};


void addLast(struct node **head, int val)
{
    //create a new node
    struct node *newNode = malloc(sizeof(struct node));
    newNode->data = val;
    newNode->next     = NULL;

    //if head is NULL, it is an empty list
    if(*head == NULL)
         *head = newNode;
    //Otherwise, find the last node and add the newNode
    else
    {
        struct node *lastNode = *head;

        //last node's next address will be NULL.
        while(lastNode->next != NULL)
        {
            lastNode = lastNode->next;
        }

        //add the newNode at the end of the linked list
        lastNode->next = newNode;
    }

}

void printList(struct node *head)
{
    struct node *temp = head;

    //iterate the entire linked list and print the data
    while(temp != NULL)
    {
         printf("%d->", temp->data);
         temp = temp->next;
    }
    printf("NULL\n");

}

int main()
{
     struct node *head = NULL;

     addLast(&head,10);
     addLast(&head,20);
     addLast(&head,30);
     addLast(&head,40);

     printList(head);

     return 0;
}

/* output
aishwariya@linux:~/Hackerrank/Day2$ ./a.out
10->20->30->40->NULL

*/

===================================================================================   

3]Find the maximum height of binary tree

// C++ program to find height of tree
#include <iostream>
using namespace std;


/* A binary tree node has data, pointer to left child
and a pointer to right child */
class node
{
        public:
        int data;
        node* left;
        node* right;
};

/* Compute the "maxDepth" of a tree -- the number of
        nodes along the longest path from the root node
        down to the farthest leaf node.*/
int maxDepth(node* node)
{
        if (node == NULL)
                return 0;
        else
        {
                /* compute the depth of each subtree */
                int lDepth = maxDepth(node->left);
                int rDepth = maxDepth(node->right);

                /* use the larger one */
                if (lDepth > rDepth)
                        return(lDepth + 1);
                else return(rDepth + 1);
        }
}

/* Helper function that allocates a new node with the
given data and NULL left and right pointers. */
node* newNode(int data)
{
        node* Node = new node();
        Node->data = data;
        Node->left = NULL;
        Node->right = NULL;

        return(Node);
}

// Driver code
int main()
{
 node *root = newNode(1);

        root->left = newNode(2);
        root->right = newNode(3);
        root->left->left = newNode(4);
        root->left->right = newNode(5);

        cout << "Height of tree is " << maxDepth(root);
        return 0;
}


/* output
aishwariya@linux:~/Hackerrank/Day2$ ./a.out
Height of tree is 3
*/

=======================================================================================

